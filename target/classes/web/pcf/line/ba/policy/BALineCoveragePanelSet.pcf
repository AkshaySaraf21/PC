<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../../pcf.xsd">
  <PanelSet
    id="BALineCoveragePanelSet">
    <Require
      name="baLine"
      type="BusinessAutoLine"/>
    <Require
      name="openForEdit"
      type="boolean"/>
    <Variable
      initialValue="baLine.Pattern.getCoverageCategory(&quot;BAPOwnedLiabGrp&quot;)"
      name="baOwnedLiabCat"/>
    <Variable
      initialValue="baLine.Pattern.getCoverageCategory(&quot;BAPHiredGrp&quot;)"
      name="baHiredGroup"/>
    <Variable
      initialValue="baLine.Pattern.getCoverageCategory(&quot;BAPNonownedGrp&quot;)"
      name="nonOwnedGroup"/>
    <PanelRef
      def="BALineDV(baLine.Branch)"/>
    <PanelRef>
      <TitleBar
        title="baOwnedLiabCat.DisplayName"/>
      <DetailViewPanel>
        <Variable
          initialValue="baOwnedLiabCat.coveragePatternsForEntity(BusinessAutoLine).whereSelectedOrAvailable(baLine, openForEdit)"
          name="baOwnedLiabCatCoveragePatterns"
          recalculateOnRefresh="true"/>
        <InputColumn>
          <InputIterator
            elementName="coveragePattern"
            forceRefreshDespiteChangedEntries="true"
            id="baLineLiabCatIterator"
            value="baOwnedLiabCatCoveragePatterns">
            <IteratorSort
              sortBy="coveragePattern.Priority"
              sortOrder="1"/>
            <InputSetRef
              def="CoverageInputSet(coveragePattern, baLine, openForEdit)"
              id="BALiabGroupInputSet"/>
          </InputIterator>
        </InputColumn>
      </DetailViewPanel>
    </PanelRef>
    <PanelRef>
      <TitleBar
        title="baHiredGroup.DisplayName"/>
      <DetailViewPanel>
        <Variable
          initialValue="baLine.UnusedHiredAutoStates"
          name="unusedStates"
          recalculateOnRefresh="true"/>
        <Variable
          initialValue="unusedStates[0]"
          name="newState"
          type="Jurisdiction"/>
        <Variable
          initialValue="baHiredGroup.coveragePatternsForEntity(BusinessAutoLine).whereSelectedOrAvailable(baLine, openForEdit)"
          name="baHiredGroupCoveragePatterns"
          recalculateOnRefresh="true"/>
        <InputColumn>
          <InputIterator
            elementName="coveragePattern"
            forceRefreshDespiteChangedEntries="true"
            id="BAPHiredGrpIterator"
            value="baHiredGroupCoveragePatterns">
            <IteratorSort
              sortBy="coveragePattern.Priority"
              sortOrder="1"/>
            <InputSetRef
              def="CoverageInputSet(coveragePattern, baLine, openForEdit)"
              id="BAHiredGroupInputSet"/>
          </InputIterator>
        </InputColumn>
        <InputColumn>
          <ListViewInput
            boldLabel="true"
            id="HiredAutoLVInput"
            label="displaykey.Web.Policy.BA.HiredAutoStates"
            labelAbove="true"
            visible="true">
            <Toolbar>
              <ToolbarRangeInput
                editable="true"
                hideIfReadOnly="true"
                id="SelectStateHiredAuto"
                label="displaykey.Web.Policy.BA.SelectState"
                value="newState"
                valueRange="unusedStates"
                valueWidth="150"/>
              <IteratorButtons
                addLabel="displaykey.Web.Policy.BA.AddState"
                iterator="HiredAutoIterator"
                removeLabel="displaykey.Web.Policy.BA.RemoveState"/>
            </Toolbar>
            <ListViewPanel>
              <RowIterator
                checkBoxVisible="true"
                editable="true"
                elementName="jurisdiction"
                hasCheckBoxes="true"
                hideCheckBoxesIfReadOnly="true"
                id="HiredAutoIterator"
                toCreateAndAdd="baLine.createOrAddHiredAutoJurisdiction(newState)"
                toRemove="baLine.removeAsHiredAutoJurisdiction(jurisdiction)"
                value="baLine.HiredAutoJurisdictions">
                <Row>
                  <TypeKeyCell
                    id="Jurisdiction"
                    label="displaykey.Web.Policy.BA.State"
                    value="jurisdiction.State"
                    width="100"/>
                  <Cell
                    available="jurisdiction.HiredAutoBasis.IfAnyExposure == false"
                    editable="true"
                    id="CostHire"
                    label="displaykey.Web.Policy.BA.CostHire"
                    numCols="15"
                    validationExpression="baLine.getCostOfHireValidation(jurisdiction.HiredAutoBasis.Basis, jurisdiction.HiredAutoBasis.IfAnyExposure)"
                    value="jurisdiction.HiredAutoBasis.Basis"/>
                  <Cell
                    editable="true"
                    id="IfAny"
                    label="displaykey.Web.Policy.BA.IfAnyExposure"
                    numCols="2"
                    value="jurisdiction.HiredAutoBasis.IfAnyExposure">
                    <PostOnChange
                      onChange="if (jurisdiction.HiredAutoBasis.IfAnyExposure) {jurisdiction.HiredAutoBasis.Basis = null}"/>
                  </Cell>
                </Row>
              </RowIterator>
            </ListViewPanel>
          </ListViewInput>
        </InputColumn>
      </DetailViewPanel>
    </PanelRef>
    <PanelRef>
      <TitleBar
        title="nonOwnedGroup.DisplayName"/>
      <DetailViewPanel>
        <Variable
          initialValue="baLine.UnusedNonOwnedStates"
          name="unusedStates"
          recalculateOnRefresh="true"/>
        <Variable
          initialValue="unusedStates[0]"
          name="newState"
          type="Jurisdiction"/>
        <Variable
          initialValue="nonOwnedGroup.coveragePatternsForEntity(BusinessAutoLine).whereSelectedOrAvailable(baLine, openForEdit)"
          name="nonOwnedGroupCoveragePatterns"
          recalculateOnRefresh="true"/>
        <InputColumn>
          <InputIterator
            elementName="coveragePattern"
            forceRefreshDespiteChangedEntries="true"
            id="BAPNonownedGrpIterator"
            value="nonOwnedGroupCoveragePatterns">
            <InputSetRef
              def="CoverageInputSet(coveragePattern, baLine, openForEdit)"
              id="BANonOwnedGroupInputSet"/>
          </InputIterator>
        </InputColumn>
        <InputColumn>
          <ListViewInput
            boldLabel="true"
            id="NonownedLVInput"
            label="displaykey.Web.Policy.BA.NonownedStates"
            labelAbove="true">
            <Toolbar>
              <ToolbarRangeInput
                editable="true"
                hideIfReadOnly="true"
                id="SelectStateNonowned"
                label="displaykey.Web.Policy.BA.SelectState"
                value="newState"
                valueRange="unusedStates"
                valueWidth="150"/>
              <AddButton
                hideIfReadOnly="true"
                id="AddNonownedState"
                iterator="NonownedIterator"
                label="displaykey.Web.Policy.BA.AddState"/>
              <RemoveButton
                hideIfReadOnly="true"
                id="RemoveNonownedState"
                iterator="NonownedIterator"
                label="displaykey.Web.Policy.BA.RemoveState"/>
            </Toolbar>
            <ListViewPanel>
              <RowIterator
                editable="true"
                elementName="jurisdiction"
                hideCheckBoxesIfReadOnly="true"
                id="NonownedIterator"
                toCreateAndAdd="baLine.createOrAddNonOwnedJurisdiction(newState)"
                toRemove="baLine.removeAsNonOwnedJurisdiction(jurisdiction)"
                value="baLine.NonOwnedJurisdictions">
                <Row>
                  <TypeKeyCell
                    id="Jurisdiction"
                    label="displaykey.Web.Policy.BA.State"
                    value="jurisdiction.State"
                    width="100"/>
                  <Cell
                    editable="true"
                    id="NumEmployees"
                    label="displaykey.Web.Policy.BA.NumEmployees"
                    numCols="15"
                    value="jurisdiction.NonOwnedBasis.NumEmployees"/>
                  <Cell
                    editable="true"
                    id="TotalPartners"
                    label="displaykey.Web.Policy.BA.TotalPartners"
                    numCols="15"
                    value="jurisdiction.NonOwnedBasis.NumPartners"/>
                  <Cell
                    editable="true"
                    id="TotalVolunteers"
                    label="displaykey.Web.Policy.BA.TotalVolunteers"
                    numCols="15"
                    value="jurisdiction.NonOwnedBasis.NumVolunteers"/>
                </Row>
              </RowIterator>
            </ListViewPanel>
          </ListViewInput>
        </InputColumn>
      </DetailViewPanel>
    </PanelRef>
  </PanelSet>
</PCF>