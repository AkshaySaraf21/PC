package rules.EventMessage.EventFired_dir

@gw.rules.RuleDisabled
@gw.rules.RuleName("QA_EVNT_IssueEvents")
internal class QA_EVNT_IssueEvents {
  static function doCondition(messageContext : entity.MessageContext) : boolean {
    
/*start00rule*/
return /*
(MessageContext.EventName=="IssueSubmission"||MessageContext.EventName=="IssuePolicyChange"
 ||MessageContext.EventName=="IssueReinstatement"||MessageContext.EventName=="IssueRenewal"||MessageContext.EventName=="IssueRewrite"
 ||MessageContext.EventName=="SendRenewalDocuments"||MessageContext.EventName=="SendRescindNotices"||MessageContext.EventName=="SendNonRenewalDocuments"||MessageContext.EventName=="SendNonRenewal"
 ||MessageContext.EventName=="SubmissionBatchAdded" ||MessageContext.EventName=="SubmissionBatchChanged"||MessageContext.EventName=="SubmissionBatchRemoved"||MessageContext.EventName=="RequestQuote"
 ||MessageContext.EventName=="SendNotTakenDocuments"||MessageContext.EventName=="SendNotTaken"))&&MessageContext.DestID==111
*/
false
/*end00rule*/

  }

  static function doAction(messageContext : entity.MessageContext, actions : gw.rules.Action) {

/*start00rule*/
messageContext.createMessage("Test Event: " +messageContext.EventName)
print("Test Event Name is : "+messageContext.EventName)
/*end00rule*/

  }
}
