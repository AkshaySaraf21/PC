<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../../pcf.xsd">
  <PanelSet
    id="PolicyLineSummaryPanelSet"
    mode="WorkersCompLine">
    <Require
      name="line"
      type="PolicyLine"/>
    <Require
      name="jobWizardHelper"
      type="web.job.JobWizardHelper"/>
    <Variable
      initialValue="line.Branch"
      name="period"/>
    <Variable
      initialValue="line as WorkersCompLine"
      name="wcLine"/>
    <DetailViewPanel>
      <Variable
        initialValue="wcLine.Pattern.getCoverageCategory(&quot;WorkersCompGrp&quot;).coveragePatternsForEntity(WorkersCompLine).where(\ c -&gt; c.DisplayName != &quot;Workers' Comp&quot;).whereSelectedOrAvailable(wcLine, CurrentLocation.InEditMode)"
        name="wcGroupCoveragePatterns"
        recalculateOnRefresh="true"/>
      <InputColumn>
        <Label
          label="displaykey.Web.Policy.WC.WCCoveredStates"/>
        <Input
          id="CoveredStates"
          label="displaykey.Web.Policy.WC.CoveredStates"
          value="wcLine.Jurisdictions*.State.join(&quot;,&quot;)"/>
        <Input
          id="GoverningClass"
          label="displaykey.Web.Policy.WC.GoverningClass"
          value="wcLine.GoverningClass.Code"/>
        <InputIterator
          elementName="coveragePattern"
          forceRefreshDespiteChangedEntries="true"
          id="WCGrpIterator"
          value="wcGroupCoveragePatterns">
          <IteratorSort
            sortBy="coveragePattern.Priority"
            sortOrder="1"/>
          <InputSetRef
            def="CoverageInputSet(coveragePattern, wcLine, true)"
            mode="coveragePattern.Code"/>
        </InputIterator>
      </InputColumn>
    </DetailViewPanel>
    <PanelRef>
      <Toolbar/>
      <ListDetailPanel
        selectionName="selectedJurisdiction"
        selectionType="WCJurisdiction">
        <ListViewPanel
          available="selectedJurisdiction != null"
          id="PolicyLinePerStateConfig_LV"
          visible="true">
          <RowIterator
            editable="false"
            elementName="covJuris"
            value="wcLine.Jurisdictions">
            <IteratorSort
              sortBy="covJuris.State.DisplayName"
              sortOrder="1"/>
            <Row>
              <TextCell
                id="StateName"
                label="displaykey.Web.Policy.LocationContainer.Location.State"
                numCols="16"
                value="covJuris.State"/>
              <TextCell
                id="RiskID"
                label="displaykey.Web.Policy.PolicyLine.PerState.OfficialIDs"
                numCols="100"
                numEntries="5"
                outputConversion="officialIDOutputConverter(VALUE)"
                value="getOfficialIDs(covJuris)"/>
            </Row>
          </RowIterator>
        </ListViewPanel>
        <CardViewPanel>
          <Card
            id="GeneralInfoCard"
            title="displaykey.Web.Policy.PolicyLine.PerState.Panel.GeneralInfo.Title">
            <PanelRef
              def="PolicyLinePerStateConfigDV(wcLine, selectedJurisdiction)"/>
            <PanelRef>
              <TitleBar
                title="displaykey.Web.Policy.WC.CoveredEmployees"/>
              <DetailViewPanel>
                <InputColumn>
                  <InputSetRef
                    def="WorkersCompClassesInputSet(selectedJurisdiction, wcLine)"/>
                </InputColumn>
              </DetailViewPanel>
            </PanelRef>
          </Card>
        </CardViewPanel>
      </ListDetailPanel>
    </PanelRef>
    <!-- options list -->
    <PanelRef
      def="WCOptionsPanelSet(period, false)"/>
    <!-- forms list -->
    <PanelRef
      def="FormsDV(period)"/>
    <Code><![CDATA[function getOfficialIDs(covJuris : entity.WCJurisdiction) : entity.OfficialID[] {
  var officialIDs = period.PrimaryNamedInsured.AccountContactRole.AccountContact.Contact.OfficialIDs
        .where( \ o -> o.State == covJuris.State)
  return officialIDs
}

function officialIDOutputConverter(VALUE : entity.OfficialID[]) : String {
  if (VALUE == null) {return ""}
  var officialIDValues = VALUE.map(\ id -> id.getOfficialIDValue()!=null ? id.getOfficialIDValue() : "")
  return officialIDValues.where(\ val -> val!=null).join(",")
}]]></Code>
  </PanelSet>
</PCF>