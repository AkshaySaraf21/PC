<?xml version="1.0"?>
<wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" targetNamespace="http://api.webservices.bc.guidewire.com/" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:impl="http://api.webservices.bc.guidewire.com/" xmlns:intf="http://api.webservices.bc.guidewire.com/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:tns1="http://entity.webservices.bc.guidewire.com/" xmlns:tns2="http://enumeration.webservices.bc.guidewire.com/" xmlns:tns3="http://fault.webservices.bc.guidewire.com/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <!-- WSDL created by Apache Axis version: 1.2.1
Built on Mar 05, 2007 (11:15:56 PST) -->
  <wsdl:types>
    <schema xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="http://entity.webservices.bc.guidewire.com/">
      <import namespace="http://fault.webservices.bc.guidewire.com/"/>
      <import namespace="http://enumeration.webservices.bc.guidewire.com/"/>
      <import namespace="http://api.webservices.bc.guidewire.com/"/>
      <import namespace="http://schemas.xmlsoap.org/soap/encoding/"/>
      <complexType name="RenewalInfo">
        <complexContent>
          <extension base="tns1:IssuePolicyInfo">
            <sequence>
              <element name="PriorPolicyNumber" nillable="true" type="soapenc:string"/>
              <element name="PriorTermNumber" nillable="true" type="soapenc:int"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="RewriteInfo">
        <complexContent>
          <extension base="tns1:RenewalInfo">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="AddressInfo">
        <sequence>
          <element name="AddressLine1" nillable="true" type="soapenc:string"/>
          <element name="AddressLine2" nillable="true" type="soapenc:string"/>
          <element name="City" nillable="true" type="soapenc:string"/>
          <element name="Country" nillable="true" type="soapenc:string"/>
          <element name="PostalCode" nillable="true" type="soapenc:string"/>
          <element name="Primary" type="xsd:boolean"/>
          <element name="State" nillable="true" type="soapenc:string"/>
        </sequence>
      </complexType>
      <complexType name="ArrayOfAddressInfo">
        <complexContent>
          <restriction base="soapenc:Array">
            <attribute ref="soapenc:arrayType" wsdl:arrayType="tns1:AddressInfo[]"/>
          </restriction>
        </complexContent>
      </complexType>
      <complexType name="PCContactInfo">
        <sequence>
          <element name="AccountNumbers" nillable="true" type="impl:ArrayOf_soapenc_string"/>
          <element maxOccurs="1" minOccurs="0" name="Addresses" nillable="true" type="tns1:ArrayOfAddressInfo"/>
          <element name="ContactType" nillable="true" type="soapenc:string"/>
          <element name="DisplayName" nillable="true" type="soapenc:string"/>
          <element name="EmailAddress1" nillable="true" type="soapenc:string"/>
          <element name="FirstName" nillable="true" type="soapenc:string"/>
          <element name="LastName" nillable="true" type="soapenc:string"/>
          <element name="Name" nillable="true" type="soapenc:string"/>
          <element name="PublicID" nillable="true" type="soapenc:string"/>
          <element name="WorkPhone" nillable="true" type="soapenc:string"/>
        </sequence>
      </complexType>
      <complexType name="PolicyChangeInfo">
        <complexContent>
          <extension base="tns1:BillingInstructionInfo">
            <sequence>
              <element name="PeriodEnd" nillable="true" type="xsd:dateTime"/>
              <element name="PeriodStart" nillable="true" type="xsd:dateTime"/>
              <element maxOccurs="1" minOccurs="0" name="PrimaryNamedInsuredContact" nillable="true" type="tns1:PCContactInfo"/>
              <element name="StateCode" nillable="true" type="soapenc:string"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="IssuePolicyInfo">
        <complexContent>
          <extension base="tns1:PolicyChangeInfo">
            <sequence>
              <element name="AccountNumber" nillable="true" type="soapenc:string"/>
              <element name="AssignedRisk" type="xsd:boolean"/>
              <element name="BillingMethodCode" nillable="true" type="soapenc:string"/>
              <element name="ModelDate" nillable="true" type="xsd:dateTime"/>
              <element name="OfferNumber" nillable="true" type="soapenc:string"/>
              <element name="PaymentPlanPublicId" nillable="true" type="soapenc:string"/>
              <element name="ProducerCodeOfRecordId" nillable="true" type="soapenc:string"/>
              <element name="ProductCode" nillable="true" type="soapenc:string"/>
              <element name="UWCompanyCode" nillable="true" type="soapenc:string"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ReinstatementInfo">
        <complexContent>
          <extension base="tns1:BillingInstructionInfo">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="FinalAuditInfo">
        <complexContent>
          <extension base="tns1:BillingInstructionInfo">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PremiumReportInfo">
        <complexContent>
          <extension base="tns1:BillingInstructionInfo">
            <sequence>
              <element name="AuditPeriodEndDate" nillable="true" type="xsd:dateTime"/>
              <element name="AuditPeriodStartDate" nillable="true" type="xsd:dateTime"/>
              <element name="PaymentReceived" type="xsd:boolean"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PCPolicyPeriodInfo">
        <sequence>
          <element name="PolicyNumber" nillable="true" type="soapenc:string"/>
          <element name="TermNumber" type="xsd:int"/>
        </sequence>
      </complexType>
      <complexType name="ChargeInfo">
        <sequence>
          <element name="Amount" nillable="true" type="soapenc:decimal"/>
          <element name="ChargeGroup" nillable="true" type="soapenc:string"/>
          <element name="ChargePatternCode" nillable="true" type="soapenc:string"/>
        </sequence>
      </complexType>
      <complexType name="ArrayOfChargeInfo">
        <complexContent>
          <restriction base="soapenc:Array">
            <attribute ref="soapenc:arrayType" wsdl:arrayType="tns1:ChargeInfo[]"/>
          </restriction>
        </complexContent>
      </complexType>
      <complexType name="BillingInstructionInfo">
        <complexContent>
          <extension base="tns1:PCPolicyPeriodInfo">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="ChargeInfos" nillable="true" type="tns1:ArrayOfChargeInfo"/>
              <element name="DepositRequirement" nillable="true" type="soapenc:decimal"/>
              <element name="Description" nillable="true" type="soapenc:string"/>
              <element name="EffectiveDate" nillable="true" type="xsd:dateTime"/>
              <element name="HasScheduledFinalAudit" type="xsd:boolean"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="CancelPolicyInfo">
        <complexContent>
          <extension base="tns1:BillingInstructionInfo">
            <sequence>
              <element name="CancellationReason" nillable="true" type="soapenc:string"/>
              <element maxOccurs="1" minOccurs="0" name="CancellationType" nillable="true" type="tns2:CancellationType"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ArrayOfPCContactInfo">
        <complexContent>
          <restriction base="soapenc:Array">
            <attribute ref="soapenc:arrayType" wsdl:arrayType="tns1:PCContactInfo[]"/>
          </restriction>
        </complexContent>
      </complexType>
      <complexType name="PCAccountInfo">
        <sequence>
          <element name="AccountName" nillable="true" type="soapenc:string"/>
          <element name="AccountNumber" nillable="true" type="soapenc:string"/>
          <element maxOccurs="1" minOccurs="0" name="BillingContacts" nillable="true" type="tns1:ArrayOfPCContactInfo"/>
          <element maxOccurs="1" minOccurs="0" name="InsuredContact" nillable="true" type="tns1:PCContactInfo"/>
          <element name="InsuredIsBilling" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation>
If the insured contact is also a billing contact       </xsd:documentation>
            </xsd:annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="PCProducerInfo">
        <sequence>
          <element name="AgencyBillPlanID" nillable="true" type="soapenc:string"/>
          <element maxOccurs="1" minOccurs="0" name="PrimaryContact" nillable="true" type="tns1:PCContactInfo"/>
          <element name="ProducerName" nillable="true" type="soapenc:string"/>
          <element name="PublicID" nillable="true" type="soapenc:string"/>
          <element name="Tier" nillable="true" type="soapenc:string"/>
        </sequence>
      </complexType>
      <complexType name="ProducerCodeInfo">
        <sequence>
          <element name="Active" type="xsd:boolean"/>
          <element name="Code" nillable="true" type="soapenc:string"/>
          <element name="PublicID" nillable="true" type="soapenc:string"/>
        </sequence>
      </complexType>
      <complexType name="NewProducerCodeInfo">
        <complexContent>
          <extension base="tns1:ProducerCodeInfo">
            <sequence>
              <element name="CommissionPlanID" nillable="true" type="soapenc:string"/>
              <element name="ProducerPublicID" nillable="true" type="soapenc:string"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="CommissionPlanInfo">
        <complexContent>
          <extension base="tns1:PlanInfo">
            <sequence>
              <element name="AllowedTiers" nillable="true" type="impl:ArrayOf_soapenc_string"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PaymentPlanInfo">
        <complexContent>
          <extension base="tns1:PlanInfo">
            <sequence>
              <element name="DownPayment" nillable="true" type="soapenc:decimal"/>
              <element name="Installment" nillable="true" type="soapenc:decimal"/>
              <element name="Notes" nillable="true" type="soapenc:string"/>
              <element name="Reporting" type="xsd:boolean"/>
              <element name="Total" nillable="true" type="soapenc:decimal"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PlanInfo">
        <sequence>
          <element name="Name" nillable="true" type="soapenc:string"/>
          <element name="PublicID" nillable="true" type="soapenc:string"/>
        </sequence>
      </complexType>
      <complexType name="AgencyBillPlanInfo">
        <complexContent>
          <extension base="tns1:PlanInfo">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ArrayOfAgencyBillPlanInfo">
        <complexContent>
          <restriction base="soapenc:Array">
            <attribute ref="soapenc:arrayType" wsdl:arrayType="tns1:AgencyBillPlanInfo[]"/>
          </restriction>
        </complexContent>
      </complexType>
      <complexType name="ArrayOfCommissionPlanInfo">
        <complexContent>
          <restriction base="soapenc:Array">
            <attribute ref="soapenc:arrayType" wsdl:arrayType="tns1:CommissionPlanInfo[]"/>
          </restriction>
        </complexContent>
      </complexType>
      <complexType name="ArrayOfPaymentPlanInfo">
        <complexContent>
          <restriction base="soapenc:Array">
            <attribute ref="soapenc:arrayType" wsdl:arrayType="tns1:PaymentPlanInfo[]"/>
          </restriction>
        </complexContent>
      </complexType>
      <complexType name="InvoiceItemPreview">
        <sequence>
          <element name="Amount" nillable="true" type="soapenc:decimal"/>
          <element name="ChargeName" nillable="true" type="soapenc:string"/>
          <element name="InvoiceDate" nillable="true" type="xsd:dateTime"/>
          <element name="InvoiceDueDate" nillable="true" type="xsd:dateTime"/>
          <element maxOccurs="1" minOccurs="0" name="Type" nillable="true" type="tns2:InvoiceItemType"/>
        </sequence>
      </complexType>
      <complexType name="ArrayOfInvoiceItemPreview">
        <complexContent>
          <restriction base="soapenc:Array">
            <attribute ref="soapenc:arrayType" wsdl:arrayType="tns1:InvoiceItemPreview[]"/>
          </restriction>
        </complexContent>
      </complexType>
      <complexType name="ArrayOfPCPolicyPeriodInfo">
        <complexContent>
          <restriction base="soapenc:Array">
            <attribute ref="soapenc:arrayType" wsdl:arrayType="tns1:PCPolicyPeriodInfo[]"/>
          </restriction>
        </complexContent>
      </complexType>
    </schema>
    <schema xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="http://api.webservices.bc.guidewire.com/">
      <import namespace="http://fault.webservices.bc.guidewire.com/"/>
      <import namespace="http://entity.webservices.bc.guidewire.com/"/>
      <import namespace="http://enumeration.webservices.bc.guidewire.com/"/>
      <import namespace="http://schemas.xmlsoap.org/soap/encoding/"/>
      <complexType name="ArrayOf_soapenc_string">
        <complexContent>
          <restriction base="soapenc:Array">
            <attribute ref="soapenc:arrayType" wsdl:arrayType="soapenc:string[]"/>
          </restriction>
        </complexContent>
      </complexType>
    </schema>
    <schema xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="http://enumeration.webservices.bc.guidewire.com/">
      <import namespace="http://fault.webservices.bc.guidewire.com/"/>
      <import namespace="http://entity.webservices.bc.guidewire.com/"/>
      <import namespace="http://api.webservices.bc.guidewire.com/"/>
      <import namespace="http://schemas.xmlsoap.org/soap/encoding/"/>
      <simpleType name="CancellationType">
        <xsd:annotation>
          <xsd:documentation>
The three cancellation types for policy cancellation     </xsd:documentation>
        </xsd:annotation>
        <restriction base="xsd:string">
          <xsd:enumeration value="TC_flat">
            <xsd:annotation>
              <xsd:documentation>
Flat       </xsd:documentation>
            </xsd:annotation>
          </xsd:enumeration>
          <xsd:enumeration value="TC_prorata">
            <xsd:annotation>
              <xsd:documentation>
Pro rata       </xsd:documentation>
            </xsd:annotation>
          </xsd:enumeration>
          <xsd:enumeration value="TC_shortrate">
            <xsd:annotation>
              <xsd:documentation>
Short rate       </xsd:documentation>
            </xsd:annotation>
          </xsd:enumeration>
        </restriction>
      </simpleType>
      <simpleType name="InvoiceItemType">
        <xsd:annotation>
          <xsd:documentation>
Defines the types of invoice items     </xsd:documentation>
        </xsd:annotation>
        <restriction base="xsd:string">
          <xsd:enumeration value="TC_commissionadjustment">
            <xsd:annotation>
              <xsd:documentation>
Commission Adjustment from change in Commission       </xsd:documentation>
            </xsd:annotation>
          </xsd:enumeration>
          <xsd:enumeration value="TC_commissionremainder">
            <xsd:annotation>
              <xsd:documentation>
Commission Remainder from distribution across invoice items       </xsd:documentation>
            </xsd:annotation>
          </xsd:enumeration>
          <xsd:enumeration value="TC_deposit">
            <xsd:annotation>
              <xsd:documentation>
Down Payment       </xsd:documentation>
            </xsd:annotation>
          </xsd:enumeration>
          <xsd:enumeration value="TC_depositadjustment">
            <xsd:annotation>
              <xsd:documentation>
Down Payment Adjustment from change in Payment Plan       </xsd:documentation>
            </xsd:annotation>
          </xsd:enumeration>
          <xsd:enumeration value="TC_installment">
            <xsd:annotation>
              <xsd:documentation>
Installment       </xsd:documentation>
            </xsd:annotation>
          </xsd:enumeration>
          <xsd:enumeration value="TC_onetime">
            <xsd:annotation>
              <xsd:documentation>
One-Time Payment       </xsd:documentation>
            </xsd:annotation>
          </xsd:enumeration>
        </restriction>
      </simpleType>
    </schema>
    <schema xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="http://fault.webservices.bc.guidewire.com/">
      <import namespace="http://entity.webservices.bc.guidewire.com/"/>
      <import namespace="http://enumeration.webservices.bc.guidewire.com/"/>
      <import namespace="http://api.webservices.bc.guidewire.com/"/>
      <import namespace="http://schemas.xmlsoap.org/soap/encoding/"/>
      <complexType name="SOAPException">
        <xsd:annotation>
          <xsd:documentation>
A generic SOAP exception.     </xsd:documentation>
        </xsd:annotation>
        <sequence>
          <element name="Message" nillable="true" type="soapenc:string">
            <xsd:annotation>
              <xsd:documentation>
The message associated with this exception       </xsd:documentation>
            </xsd:annotation>
          </element>
          <element name="OtherMessages" nillable="true" type="soapenc:string">
            <xsd:annotation>
              <xsd:documentation>
Other messages attached to this exception. This message may contain information
related to other exceptions that occurred during a SOAP call, but not directly
associated with this particular exception.       </xsd:documentation>
            </xsd:annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="SOAPSenderException">
        <xsd:annotation>
          <xsd:documentation>
SOAPSenderException is the base class for all exceptions that resulted from
a sender error. This usually means that required data was not properly encoded
or was absent. Senders should not send the message again unless some steps have
been taken to make the encoded data valid.     </xsd:documentation>
        </xsd:annotation>
        <complexContent>
          <extension base="tns3:SOAPException">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="AlreadyExecutedException">
        <complexContent>
          <extension base="tns3:SOAPSenderException">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="DataConversionException">
        <xsd:annotation>
          <xsd:documentation>
Thrown by many APIs when they encounter a problem translating a SOAP data object into
an internal system object.     </xsd:documentation>
        </xsd:annotation>
        <complexContent>
          <extension base="tns3:SOAPSenderException">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="BadIdentifierException">
        <xsd:annotation>
          <xsd:documentation>
Thrown when an internal public ID doesn't map to a real bean (problem could be that type was incorrect).     </xsd:documentation>
        </xsd:annotation>
        <complexContent>
          <extension base="tns3:DataConversionException">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PermissionException">
        <xsd:annotation>
          <xsd:documentation>
Thrown when the authenticated SOAP user does not have permission to
perform the requested operation     </xsd:documentation>
        </xsd:annotation>
        <complexContent>
          <extension base="tns3:SOAPSenderException">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="SOAPServerException">
        <xsd:annotation>
          <xsd:documentation>
SOAPServerException is the base class for all exceptions that resulted from
a server error. This is something of a catch-all exception type insofar as
some things which might in fact be considered SOAPSenderExceptions are reported
as SOAPServerExceptions. Perhaps a rule failed or something else. Generally it
indicates a problem in the server that is likely retryable at some future time.
The database being down, an unavailable plugin, etc would fall into this catagory.     </xsd:documentation>
        </xsd:annotation>
        <complexContent>
          <extension base="tns3:SOAPException">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ServerStateException">
        <xsd:annotation>
          <xsd:documentation>
ServerStateException is thrown when a request is made at a time the
server is in a state that disallows the request. An example is if
an attempt is made to add a claim and the server is in maintenance
mode.     </xsd:documentation>
        </xsd:annotation>
        <complexContent>
          <extension base="tns3:SOAPServerException">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="DuplicateKeyException">
        <xsd:annotation>
          <xsd:documentation>
Throws if a duplicate data exception is detected in the database. I.e. a unique index violation.     </xsd:documentation>
        </xsd:annotation>
        <complexContent>
          <extension base="tns3:DataConversionException">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="RequiredFieldException">
        <xsd:annotation>
          <xsd:documentation>
Thrown when required data is missing from a bean.     </xsd:documentation>
        </xsd:annotation>
        <complexContent>
          <extension base="tns3:DataConversionException">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="LoginException">
        <xsd:annotation>
          <xsd:documentation>
Class of exceptions thrown when a user tries to log in and an authentication failure occurs.     </xsd:documentation>
        </xsd:annotation>
        <complexContent>
          <extension base="tns3:PermissionException">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="EntityStateException">
        <xsd:annotation>
          <xsd:documentation>
Thrown when an attempt is made to manipulate an object that is in a state
that prevents the operation from being performed. An example is trying to
modify a Claim that is marked as closed.     </xsd:documentation>
        </xsd:annotation>
        <complexContent>
          <extension base="tns3:SOAPSenderException">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="FieldConversionException">
        <xsd:annotation>
          <xsd:documentation>
Thrown when a data type cannot be converted into the native data type.     </xsd:documentation>
        </xsd:annotation>
        <complexContent>
          <extension base="tns3:DataConversionException">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="FieldFormatException">
        <xsd:annotation>
          <xsd:documentation>
Thrown when the input type does not match the format specified in the metadata. I.e. a string is too long.     </xsd:documentation>
        </xsd:annotation>
        <complexContent>
          <extension base="tns3:DataConversionException">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="UnknownTypeKeyException">
        <xsd:annotation>
          <xsd:documentation>
Thrown when a typekey value isn't available on the server. This exception can only
happen if the SOAP WSDL that is being used on the remote side is invalid.     </xsd:documentation>
        </xsd:annotation>
        <complexContent>
          <extension base="tns3:DataConversionException">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="BatchProcessException">
        <xsd:annotation>
          <xsd:documentation>
SOAP Exception specific to batch process operations     </xsd:documentation>
        </xsd:annotation>
        <complexContent>
          <extension base="tns3:SOAPServerException">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
    </schema>
  </wsdl:types>
  <wsdl:message name="getAvailableBillingMethodsRequest">
    <wsdl:part name="producerCodeId" type="soapenc:string">
      <wsdl:documentation>
null   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="waiveFinalAuditResponse">
    <wsdl:part name="waiveFinalAuditReturn" type="soapenc:string">
      <wsdl:documentation>
the public id of the policy period   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateProducerRequest">
    <wsdl:part name="producerInfo" type="tns1:PCProducerInfo">
      <wsdl:documentation>
necessary information to create producer   </wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="transactionId" type="soapenc:string">
      <wsdl:documentation>
null   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="issuePolicyPeriodRequest">
    <wsdl:part name="issuePolicyInfo" type="tns1:IssuePolicyInfo">
      <wsdl:documentation>
null   </wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="transactionId" type="soapenc:string">
      <wsdl:documentation>
null   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="rewritePolicyPeriodRequest">
    <wsdl:part name="renewalInfo" type="tns1:RewriteInfo">
      <wsdl:documentation>
information to rewrite the policy period   </wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="transactionId" type="soapenc:string">
      <wsdl:documentation>
null   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAvailableBillingMethodsResponse">
    <wsdl:part name="getAvailableBillingMethodsReturn" type="impl:ArrayOf_soapenc_string">
      <wsdl:documentation>
the list of billing methods that the producer support   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="previewInstallmentsPlanInvoicesRequest">
    <wsdl:part name="issuePolicyInfo" type="tns1:IssuePolicyInfo">
      <wsdl:documentation>
the information to issue a policy period   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="reinstatePolicyPeriodResponse">
    <wsdl:part name="reinstatePolicyPeriodReturn" type="soapenc:string">
      <wsdl:documentation>
the cancellation billing instruction public id   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="issueFinalAuditRequest">
    <wsdl:part name="finalAuditInfo" type="tns1:FinalAuditInfo">
      <wsdl:documentation>
information necessary for Final Audit   </wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="transactionId" type="soapenc:string">
      <wsdl:documentation>
null   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="scheduleFinalAuditRequest">
    <wsdl:part name="policyPeriodInfo" type="tns1:PCPolicyPeriodInfo">
      <wsdl:documentation>
information to identify the policy period   </wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="transactionId" type="soapenc:string">
      <wsdl:documentation>
null   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="RequiredFieldException">
    <wsdl:part name="fault" type="tns3:RequiredFieldException">
      <wsdl:documentation>
If required field is missing    </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="cancelPolicyPeriodResponse">
    <wsdl:part name="cancelPolicyPeriodReturn" type="soapenc:string">
      <wsdl:documentation>
the cancellation billing instruction public id   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAllPaymentPlansResponse">
    <wsdl:part name="getAllPaymentPlansReturn" type="tns1:ArrayOfPaymentPlanInfo">
      <wsdl:documentation>
the available payment plans   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createProducerCodeResponse">
    <wsdl:part name="createProducerCodeReturn" type="soapenc:string">
      <wsdl:documentation>
the public id of the producer code created   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="rewritePolicyPeriodResponse">
    <wsdl:part name="rewritePolicyPeriodReturn" type="soapenc:string">
      <wsdl:documentation>
the public id of the new policy period created   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="isAccountExistResponse">
    <wsdl:part name="isAccountExistReturn" type="xsd:boolean">
      <wsdl:documentation>
true if account exists   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="reinstatePolicyPeriodRequest">
    <wsdl:part name="reinstatementInfo" type="tns1:ReinstatementInfo">
      <wsdl:documentation>
information necessary for reinstatement of the policy period   </wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="transactionId" type="soapenc:string">
      <wsdl:documentation>
null   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createAccountResponse">
    <wsdl:part name="createAccountReturn" type="soapenc:string">
      <wsdl:documentation>
the new account public id   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAllCommissionPlansRequest"/>
  <wsdl:message name="issuePremiumReportResponse">
    <wsdl:part name="issuePremiumReportReturn" type="soapenc:string">
      <wsdl:documentation>
the Premium Reporting billing instruction public id   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="issueFinalAuditResponse">
    <wsdl:part name="issueFinalAuditReturn" type="soapenc:string">
      <wsdl:documentation>
the Audit billing instruction public id   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="transferPolicyPeriodsResponse"/>
  <wsdl:message name="createProducerCodeRequest">
    <wsdl:part name="producerCodeInfo" type="tns1:NewProducerCodeInfo">
      <wsdl:documentation>
null   </wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="transactionId" type="soapenc:string">
      <wsdl:documentation>
null   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAllPaymentPlansRequest"/>
  <wsdl:message name="BadIdentifierException">
    <wsdl:part name="fault" type="tns3:BadIdentifierException">
      <wsdl:documentation>
If no policy exists with the given number   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="DuplicateKeyException">
    <wsdl:part name="fault" type="tns3:DuplicateKeyException">
      <wsdl:documentation>
if the account number is duplicated   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="waiveFinalAuditRequest">
    <wsdl:part name="policyPeriodInfo" type="tns1:PCPolicyPeriodInfo">
      <wsdl:documentation>
information to identify the policy period   </wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="transactionId" type="soapenc:string">
      <wsdl:documentation>
null   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAllAgencyBillPlansResponse">
    <wsdl:part name="getAllAgencyBillPlansReturn" type="tns1:ArrayOfAgencyBillPlanInfo">
      <wsdl:documentation>
array of agency bill plan info objects   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="previewInstallmentsPlanInvoicesResponse">
    <wsdl:part name="previewInstallmentsPlanInvoicesReturn" type="tns1:ArrayOfInvoiceItemPreview">
      <wsdl:documentation>
the preview invoices   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="changePolicyPeriodResponse">
    <wsdl:part name="changePolicyPeriodReturn" type="soapenc:string">
      <wsdl:documentation>
the cancellation billing instruction public id   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="transferPolicyPeriodsRequest">
    <wsdl:part name="policyPeriodInfos" type="tns1:ArrayOfPCPolicyPeriodInfo">
      <wsdl:documentation>
null   </wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="targetAccountNumber" type="soapenc:string">
      <wsdl:documentation>
the target account number   </wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="transactionId" type="soapenc:string">
      <wsdl:documentation>
the unique id to make this call idempotent   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="SOAPServerException">
    <wsdl:part name="fault" type="tns3:SOAPServerException">
      <wsdl:documentation>
If any problem occurs during the transfer   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateContactRequest">
    <wsdl:part name="contactInfo" type="tns1:PCContactInfo">
      <wsdl:documentation>
information necessary for updating the contact   </wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="transactionId" type="soapenc:string">
      <wsdl:documentation>
null   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="isAccountExistRequest">
    <wsdl:part name="accountNumber" type="soapenc:string">
      <wsdl:documentation>
the account number to search for   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="changePolicyPeriodRequest">
    <wsdl:part name="changeInfo" type="tns1:PolicyChangeInfo">
      <wsdl:documentation>
information necessary for policy change   </wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="transactionId" type="soapenc:string">
      <wsdl:documentation>
null   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="scheduleFinalAuditResponse">
    <wsdl:part name="scheduleFinalAuditReturn" type="soapenc:string">
      <wsdl:documentation>
the public id of the policy period   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAllCommissionPlansResponse">
    <wsdl:part name="getAllCommissionPlansReturn" type="tns1:ArrayOfCommissionPlanInfo">
      <wsdl:documentation>
array of commission plan info objects   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="issuePolicyPeriodResponse">
    <wsdl:part name="issuePolicyPeriodReturn" type="soapenc:string">
      <wsdl:documentation>
the new policy period public id   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="isProducerExistResponse">
    <wsdl:part name="isProducerExistReturn" type="xsd:boolean">
      <wsdl:documentation>
true if the producer exists, otherwise false   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="ServerStateException">
    <wsdl:part name="fault" type="tns3:ServerStateException">
      <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateProducerCodeResponse">
    <wsdl:part name="updateProducerCodeReturn" type="soapenc:string">
      <wsdl:documentation>
the public id of the producer code created   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateAccountResponse">
    <wsdl:part name="updateAccountReturn" type="soapenc:string">
      <wsdl:documentation>
the account public id   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createAccountRequest">
    <wsdl:part name="accountInfo" type="tns1:PCAccountInfo">
      <wsdl:documentation>
the account information   </wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="transactionId" type="soapenc:string">
      <wsdl:documentation>
null   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="issuePremiumReportRequest">
    <wsdl:part name="premiumReportInfo" type="tns1:PremiumReportInfo">
      <wsdl:documentation>
information necessary for Premium Report   </wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="transactionId" type="soapenc:string">
      <wsdl:documentation>
null   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="renewPolicyPeriodRequest">
    <wsdl:part name="renewalInfo" type="tns1:RenewalInfo">
      <wsdl:documentation>
information necessary for renewing a policy period   </wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="transactionId" type="soapenc:string">
      <wsdl:documentation>
null   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPolicyPeriodResponse">
    <wsdl:part name="getPolicyPeriodReturn" type="tns1:IssuePolicyInfo">
      <wsdl:documentation>
the information about the policy period   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="isProducerExistRequest">
    <wsdl:part name="producerId" type="soapenc:string">
      <wsdl:documentation>
the public id of the producer to check   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="cancelPolicyPeriodRequest">
    <wsdl:part name="cancelInfo" type="tns1:CancelPolicyInfo">
      <wsdl:documentation>
information necessary for cancellation   </wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="transactionId" type="soapenc:string">
      <wsdl:documentation>
null   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateAccountRequest">
    <wsdl:part name="accountInfo" type="tns1:PCAccountInfo">
      <wsdl:documentation>
the account information   </wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="transactionId" type="soapenc:string">
      <wsdl:documentation>
null   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateContactResponse">
    <wsdl:part name="updateContactReturn" type="impl:ArrayOf_soapenc_string">
      <wsdl:documentation>
an array of public ids of all the contacts that were updated   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAllAgencyBillPlansRequest"/>
  <wsdl:message name="PermissionException">
    <wsdl:part name="fault" type="tns3:PermissionException">
      <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="isProducerCodeExistRequest">
    <wsdl:part name="producerId" type="soapenc:string">
      <wsdl:documentation>
null   </wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="code" type="soapenc:string">
      <wsdl:documentation>
the code of the producer code   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateProducerCodeRequest">
    <wsdl:part name="producerCodeInfo" type="tns1:ProducerCodeInfo">
      <wsdl:documentation>
necessary information to update producer code   </wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="transactionId" type="soapenc:string">
      <wsdl:documentation>
null   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="isProducerCodeExistResponse">
    <wsdl:part name="isProducerCodeExistReturn" type="xsd:boolean">
      <wsdl:documentation>
true if the producer code exist   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPolicyPeriodRequest">
    <wsdl:part name="policyPeriodInfo" type="tns1:PCPolicyPeriodInfo">
      <wsdl:documentation>
information to identify the policy period   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="AlreadyExecutedException">
    <wsdl:part name="fault" type="tns3:AlreadyExecutedException">
      <wsdl:documentation>
if the SOAP request is already executed   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateProducerResponse">
    <wsdl:part name="updateProducerReturn" type="soapenc:string">
      <wsdl:documentation>
the public id of the producer created   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createProducerRequest">
    <wsdl:part name="producerInfo" type="tns1:PCProducerInfo">
      <wsdl:documentation>
necessary information to create producer   </wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="transactionId" type="soapenc:string">
      <wsdl:documentation>
null   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="renewPolicyPeriodResponse">
    <wsdl:part name="renewPolicyPeriodReturn" type="soapenc:string">
      <wsdl:documentation>
the new policy period public id   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="createProducerResponse">
    <wsdl:part name="createProducerReturn" type="soapenc:string">
      <wsdl:documentation>
the public id of the producer created   </wsdl:documentation>
    </wsdl:part>
  </wsdl:message>
  <wsdl:portType name="BillingAPI">
    <wsdl:documentation>
This is an custom API to support integration with Policy Center and will be maintained
by Policy Center.  </wsdl:documentation>
    <wsdl:operation name="cancelPolicyPeriod" parameterOrder="cancelInfo transactionId">
      <wsdl:documentation>
Cancel a policy period.   </wsdl:documentation>
      <wsdl:input message="impl:cancelPolicyPeriodRequest" name="cancelPolicyPeriodRequest"/>
      <wsdl:output message="impl:cancelPolicyPeriodResponse" name="cancelPolicyPeriodResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
      <wsdl:fault message="impl:AlreadyExecutedException" name="AlreadyExecutedException"/>
    </wsdl:operation>
    <wsdl:operation name="changePolicyPeriod" parameterOrder="changeInfo transactionId">
      <wsdl:documentation>
Change a policy period.   </wsdl:documentation>
      <wsdl:input message="impl:changePolicyPeriodRequest" name="changePolicyPeriodRequest"/>
      <wsdl:output message="impl:changePolicyPeriodResponse" name="changePolicyPeriodResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
      <wsdl:fault message="impl:AlreadyExecutedException" name="AlreadyExecutedException"/>
    </wsdl:operation>
    <wsdl:operation name="createAccount" parameterOrder="accountInfo transactionId">
      <wsdl:documentation>
Create a new account   </wsdl:documentation>
      <wsdl:input message="impl:createAccountRequest" name="createAccountRequest"/>
      <wsdl:output message="impl:createAccountResponse" name="createAccountResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:DuplicateKeyException" name="DuplicateKeyException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
      <wsdl:fault message="impl:AlreadyExecutedException" name="AlreadyExecutedException"/>
    </wsdl:operation>
    <wsdl:operation name="createProducer" parameterOrder="producerInfo transactionId">
      <wsdl:documentation>
Create a producer in BC   </wsdl:documentation>
      <wsdl:input message="impl:createProducerRequest" name="createProducerRequest"/>
      <wsdl:output message="impl:createProducerResponse" name="createProducerResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
      <wsdl:fault message="impl:AlreadyExecutedException" name="AlreadyExecutedException"/>
    </wsdl:operation>
    <wsdl:operation name="createProducerCode" parameterOrder="producerCodeInfo transactionId">
      <wsdl:documentation>
Create a producer code in BC. Will not create a duplicate if the given Producer Code already exists.   </wsdl:documentation>
      <wsdl:input message="impl:createProducerCodeRequest" name="createProducerCodeRequest"/>
      <wsdl:output message="impl:createProducerCodeResponse" name="createProducerCodeResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
      <wsdl:fault message="impl:AlreadyExecutedException" name="AlreadyExecutedException"/>
    </wsdl:operation>
    <wsdl:operation name="getAllAgencyBillPlans">
      <wsdl:documentation>
Return an array of all agency bill plans in BC   </wsdl:documentation>
      <wsdl:input message="impl:getAllAgencyBillPlansRequest" name="getAllAgencyBillPlansRequest"/>
      <wsdl:output message="impl:getAllAgencyBillPlansResponse" name="getAllAgencyBillPlansResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
    </wsdl:operation>
    <wsdl:operation name="getAllCommissionPlans">
      <wsdl:documentation>
Return an array of all Commission Plans in BC   </wsdl:documentation>
      <wsdl:input message="impl:getAllCommissionPlansRequest" name="getAllCommissionPlansRequest"/>
      <wsdl:output message="impl:getAllCommissionPlansResponse" name="getAllCommissionPlansResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
    </wsdl:operation>
    <wsdl:operation name="getAllPaymentPlans">
      <wsdl:documentation>
Gets all of the available payment plans in the system.  Only plans which are effective (ie effectiveDate &amp;lt=
current date &amp;lt= expiration date) are returned.   </wsdl:documentation>
      <wsdl:input message="impl:getAllPaymentPlansRequest" name="getAllPaymentPlansRequest"/>
      <wsdl:output message="impl:getAllPaymentPlansResponse" name="getAllPaymentPlansResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
    </wsdl:operation>
    <wsdl:operation name="getAvailableBillingMethods" parameterOrder="producerCodeId">
      <wsdl:documentation>
Return all the billing method that the given producer support   </wsdl:documentation>
      <wsdl:input message="impl:getAvailableBillingMethodsRequest" name="getAvailableBillingMethodsRequest"/>
      <wsdl:output message="impl:getAvailableBillingMethodsResponse" name="getAvailableBillingMethodsResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
      <wsdl:fault message="impl:AlreadyExecutedException" name="AlreadyExecutedException"/>
    </wsdl:operation>
    <wsdl:operation name="getPolicyPeriod" parameterOrder="policyPeriodInfo">
      <wsdl:documentation>
Retrieve the information about the policy period including the current payment plan and
billing method   </wsdl:documentation>
      <wsdl:input message="impl:getPolicyPeriodRequest" name="getPolicyPeriodRequest"/>
      <wsdl:output message="impl:getPolicyPeriodResponse" name="getPolicyPeriodResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
    </wsdl:operation>
    <wsdl:operation name="isAccountExist" parameterOrder="accountNumber">
      <wsdl:documentation>
Check if account with the given account number already exist in the system   </wsdl:documentation>
      <wsdl:input message="impl:isAccountExistRequest" name="isAccountExistRequest"/>
      <wsdl:output message="impl:isAccountExistResponse" name="isAccountExistResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
    </wsdl:operation>
    <wsdl:operation name="isProducerCodeExist" parameterOrder="producerId code">
      <wsdl:documentation>
Return true if the producer code with the given code exists.   </wsdl:documentation>
      <wsdl:input message="impl:isProducerCodeExistRequest" name="isProducerCodeExistRequest"/>
      <wsdl:output message="impl:isProducerCodeExistResponse" name="isProducerCodeExistResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
    </wsdl:operation>
    <wsdl:operation name="isProducerExist" parameterOrder="producerId">
      <wsdl:documentation>
Return true if the producer with the same name exist   </wsdl:documentation>
      <wsdl:input message="impl:isProducerExistRequest" name="isProducerExistRequest"/>
      <wsdl:output message="impl:isProducerExistResponse" name="isProducerExistResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
    </wsdl:operation>
    <wsdl:operation name="issueFinalAudit" parameterOrder="finalAuditInfo transactionId">
      <wsdl:documentation>
Issue Final Audit for a policy period.   </wsdl:documentation>
      <wsdl:input message="impl:issueFinalAuditRequest" name="issueFinalAuditRequest"/>
      <wsdl:output message="impl:issueFinalAuditResponse" name="issueFinalAuditResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
      <wsdl:fault message="impl:AlreadyExecutedException" name="AlreadyExecutedException"/>
    </wsdl:operation>
    <wsdl:operation name="issuePolicyPeriod" parameterOrder="issuePolicyInfo transactionId">
      <wsdl:documentation>
Issue a policy period.   </wsdl:documentation>
      <wsdl:input message="impl:issuePolicyPeriodRequest" name="issuePolicyPeriodRequest"/>
      <wsdl:output message="impl:issuePolicyPeriodResponse" name="issuePolicyPeriodResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
      <wsdl:fault message="impl:AlreadyExecutedException" name="AlreadyExecutedException"/>
    </wsdl:operation>
    <wsdl:operation name="issuePremiumReport" parameterOrder="premiumReportInfo transactionId">
      <wsdl:documentation>
Issue Premium Report for a policy period.   </wsdl:documentation>
      <wsdl:input message="impl:issuePremiumReportRequest" name="issuePremiumReportRequest"/>
      <wsdl:output message="impl:issuePremiumReportResponse" name="issuePremiumReportResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
      <wsdl:fault message="impl:AlreadyExecutedException" name="AlreadyExecutedException"/>
    </wsdl:operation>
    <wsdl:operation name="previewInstallmentsPlanInvoices" parameterOrder="issuePolicyInfo">
      <wsdl:documentation>
Generates a preview of the installment schedule that'd be created for the given new policy.  The new policy is
encapsulated in an Issuance billing instruction, so that there is enough context to properly simulate the invoice
generation.   </wsdl:documentation>
      <wsdl:input message="impl:previewInstallmentsPlanInvoicesRequest" name="previewInstallmentsPlanInvoicesRequest"/>
      <wsdl:output message="impl:previewInstallmentsPlanInvoicesResponse" name="previewInstallmentsPlanInvoicesResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
    </wsdl:operation>
    <wsdl:operation name="reinstatePolicyPeriod" parameterOrder="reinstatementInfo transactionId">
      <wsdl:documentation>
Reinstate a policy period.   </wsdl:documentation>
      <wsdl:input message="impl:reinstatePolicyPeriodRequest" name="reinstatePolicyPeriodRequest"/>
      <wsdl:output message="impl:reinstatePolicyPeriodResponse" name="reinstatePolicyPeriodResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
      <wsdl:fault message="impl:AlreadyExecutedException" name="AlreadyExecutedException"/>
    </wsdl:operation>
    <wsdl:operation name="renewPolicyPeriod" parameterOrder="renewalInfo transactionId">
      <wsdl:documentation>
Renew a policy period if it is already exist or issue a NewRenewal BI if the period
does not exist in BC yet.   </wsdl:documentation>
      <wsdl:input message="impl:renewPolicyPeriodRequest" name="renewPolicyPeriodRequest"/>
      <wsdl:output message="impl:renewPolicyPeriodResponse" name="renewPolicyPeriodResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
      <wsdl:fault message="impl:AlreadyExecutedException" name="AlreadyExecutedException"/>
    </wsdl:operation>
    <wsdl:operation name="rewritePolicyPeriod" parameterOrder="renewalInfo transactionId">
      <wsdl:documentation>
Rewrite an existing policy period.   </wsdl:documentation>
      <wsdl:input message="impl:rewritePolicyPeriodRequest" name="rewritePolicyPeriodRequest"/>
      <wsdl:output message="impl:rewritePolicyPeriodResponse" name="rewritePolicyPeriodResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
      <wsdl:fault message="impl:AlreadyExecutedException" name="AlreadyExecutedException"/>
    </wsdl:operation>
    <wsdl:operation name="scheduleFinalAudit" parameterOrder="policyPeriodInfo transactionId">
      <wsdl:documentation>
Schedule a final audit in BC. This function will set the policy period's closure status from
OPEN or CLOSE to OPEN_LOCK and make the policy period require final audit.   </wsdl:documentation>
      <wsdl:input message="impl:scheduleFinalAuditRequest" name="scheduleFinalAuditRequest"/>
      <wsdl:output message="impl:scheduleFinalAuditResponse" name="scheduleFinalAuditResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
      <wsdl:fault message="impl:AlreadyExecutedException" name="AlreadyExecutedException"/>
    </wsdl:operation>
    <wsdl:operation name="transferPolicyPeriods" parameterOrder="policyPeriodInfos targetAccountNumber transactionId">
      <wsdl:documentation>
Transfer policy period to another account.   </wsdl:documentation>
      <wsdl:input message="impl:transferPolicyPeriodsRequest" name="transferPolicyPeriodsRequest"/>
      <wsdl:output message="impl:transferPolicyPeriodsResponse" name="transferPolicyPeriodsResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:RequiredFieldException" name="RequiredFieldException"/>
      <wsdl:fault message="impl:SOAPServerException" name="SOAPServerException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
      <wsdl:fault message="impl:AlreadyExecutedException" name="AlreadyExecutedException"/>
    </wsdl:operation>
    <wsdl:operation name="updateAccount" parameterOrder="accountInfo transactionId">
      <wsdl:documentation>
Update an existing account   </wsdl:documentation>
      <wsdl:input message="impl:updateAccountRequest" name="updateAccountRequest"/>
      <wsdl:output message="impl:updateAccountResponse" name="updateAccountResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
      <wsdl:fault message="impl:AlreadyExecutedException" name="AlreadyExecutedException"/>
    </wsdl:operation>
    <wsdl:operation name="updateContact" parameterOrder="contactInfo transactionId">
      <wsdl:documentation>
Update a contact with the given contact's public id   </wsdl:documentation>
      <wsdl:input message="impl:updateContactRequest" name="updateContactRequest"/>
      <wsdl:output message="impl:updateContactResponse" name="updateContactResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
      <wsdl:fault message="impl:AlreadyExecutedException" name="AlreadyExecutedException"/>
    </wsdl:operation>
    <wsdl:operation name="updateProducer" parameterOrder="producerInfo transactionId">
      <wsdl:documentation>
Update an existing producer in BC   </wsdl:documentation>
      <wsdl:input message="impl:updateProducerRequest" name="updateProducerRequest"/>
      <wsdl:output message="impl:updateProducerResponse" name="updateProducerResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
      <wsdl:fault message="impl:AlreadyExecutedException" name="AlreadyExecutedException"/>
    </wsdl:operation>
    <wsdl:operation name="updateProducerCode" parameterOrder="producerCodeInfo transactionId">
      <wsdl:documentation>
Update an existing producer code in BC. The fields on producer code that can be updated via the
ProducerCodeInfo are Active and Code.   </wsdl:documentation>
      <wsdl:input message="impl:updateProducerCodeRequest" name="updateProducerCodeRequest"/>
      <wsdl:output message="impl:updateProducerCodeResponse" name="updateProducerCodeResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
      <wsdl:fault message="impl:AlreadyExecutedException" name="AlreadyExecutedException"/>
    </wsdl:operation>
    <wsdl:operation name="waiveFinalAudit" parameterOrder="policyPeriodInfo transactionId">
      <wsdl:documentation>
Waive a final audit in BC. This function will set the policy period's closure status from
OPEN_LOCK to OPEN and make the policy period do not require final audit anymore.   </wsdl:documentation>
      <wsdl:input message="impl:waiveFinalAuditRequest" name="waiveFinalAuditRequest"/>
      <wsdl:output message="impl:waiveFinalAuditResponse" name="waiveFinalAuditResponse"/>
      <wsdl:fault message="impl:ServerStateException" name="ServerStateException"/>
      <wsdl:fault message="impl:PermissionException" name="PermissionException"/>
      <wsdl:fault message="impl:BadIdentifierException" name="BadIdentifierException"/>
      <wsdl:fault message="impl:AlreadyExecutedException" name="AlreadyExecutedException"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="BillingAPISoapBinding" type="impl:BillingAPI">
    <wsdlsoap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="cancelPolicyPeriod">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="cancelPolicyPeriodRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="cancelPolicyPeriodResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
If no policy exists with the given number    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="AlreadyExecutedException">
        <wsdl:documentation>
if the SOAP request is already executed    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="AlreadyExecutedException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="changePolicyPeriod">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="changePolicyPeriodRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="changePolicyPeriodResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
If no policy exists with the given number    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="AlreadyExecutedException">
        <wsdl:documentation>
if the SOAP request is already executed    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="AlreadyExecutedException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="createAccount">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="createAccountRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="createAccountResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="DuplicateKeyException">
        <wsdl:documentation>
if the account number is duplicated    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="DuplicateKeyException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
Thrown when an internal public ID doesn't map to a real bean (problem could be that type was incorrect)    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="AlreadyExecutedException">
        <wsdl:documentation>
if the SOAP request is already executed    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="AlreadyExecutedException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="createProducer">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="createProducerRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="createProducerResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
Thrown when an internal public ID doesn't map to a real bean (problem could be that type was incorrect)    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="AlreadyExecutedException">
        <wsdl:documentation>
if the SOAP request is already executed    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="AlreadyExecutedException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="createProducerCode">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="createProducerCodeRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="createProducerCodeResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
Thrown when an internal public ID doesn't map to a real bean (problem could be that type was incorrect)    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="AlreadyExecutedException">
        <wsdl:documentation>
if the SOAP request is already executed    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="AlreadyExecutedException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAllAgencyBillPlans">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="getAllAgencyBillPlansRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="getAllAgencyBillPlansResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
Thrown when an internal public ID doesn't map to a real bean (problem could be that type was incorrect)    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAllCommissionPlans">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="getAllCommissionPlansRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="getAllCommissionPlansResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
Thrown when an internal public ID doesn't map to a real bean (problem could be that type was incorrect)    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAllPaymentPlans">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="getAllPaymentPlansRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="getAllPaymentPlansResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
Thrown when an internal public ID doesn't map to a real bean (problem could be that type was incorrect)    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAvailableBillingMethods">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="getAvailableBillingMethodsRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="getAvailableBillingMethodsResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
If no producer exists with the given producer code    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="AlreadyExecutedException">
        <wsdl:documentation>
if the SOAP request is already executed    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="AlreadyExecutedException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getPolicyPeriod">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="getPolicyPeriodRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="getPolicyPeriodResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
Thrown when an internal public ID doesn't map to a real bean (problem could be that type was incorrect)    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="isAccountExist">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="isAccountExistRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="isAccountExistResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
Thrown when an internal public ID doesn't map to a real bean (problem could be that type was incorrect)    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="isProducerCodeExist">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="isProducerCodeExistRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="isProducerCodeExistResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
Thrown when an internal public ID doesn't map to a real bean (problem could be that type was incorrect)    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="isProducerExist">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="isProducerExistRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="isProducerExistResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
Thrown when an internal public ID doesn't map to a real bean (problem could be that type was incorrect)    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="issueFinalAudit">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="issueFinalAuditRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="issueFinalAuditResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
If no policy exists with the given number    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="AlreadyExecutedException">
        <wsdl:documentation>
if the SOAP request is already executed    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="AlreadyExecutedException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="issuePolicyPeriod">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="issuePolicyPeriodRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="issuePolicyPeriodResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
If a policy already exists with the given number    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="AlreadyExecutedException">
        <wsdl:documentation>
if the SOAP request is already executed    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="AlreadyExecutedException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="issuePremiumReport">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="issuePremiumReportRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="issuePremiumReportResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
If no policy exists with the given number    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="AlreadyExecutedException">
        <wsdl:documentation>
if the SOAP request is already executed    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="AlreadyExecutedException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="previewInstallmentsPlanInvoices">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="previewInstallmentsPlanInvoicesRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="previewInstallmentsPlanInvoicesResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
Thrown when an internal public ID doesn't map to a real bean (problem could be that type was incorrect)    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="reinstatePolicyPeriod">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="reinstatePolicyPeriodRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="reinstatePolicyPeriodResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
If no policy exists with the given number    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="AlreadyExecutedException">
        <wsdl:documentation>
if the SOAP request is already executed    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="AlreadyExecutedException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="renewPolicyPeriod">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="renewPolicyPeriodRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="renewPolicyPeriodResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
If no policy exists with the given number    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="AlreadyExecutedException">
        <wsdl:documentation>
if the SOAP request is already executed    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="AlreadyExecutedException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="rewritePolicyPeriod">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="rewritePolicyPeriodRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="rewritePolicyPeriodResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
If no policy exists with the given number    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="AlreadyExecutedException">
        <wsdl:documentation>
if the SOAP request is already executed    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="AlreadyExecutedException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="scheduleFinalAudit">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="scheduleFinalAuditRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="scheduleFinalAuditResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
Thrown when an internal public ID doesn't map to a real bean (problem could be that type was incorrect)    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="AlreadyExecutedException">
        <wsdl:documentation>
if the SOAP request is already executed    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="AlreadyExecutedException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="transferPolicyPeriods">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="transferPolicyPeriodsRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="transferPolicyPeriodsResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="RequiredFieldException">
        <wsdl:documentation>
If required field is missing     </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="RequiredFieldException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="SOAPServerException">
        <wsdl:documentation>
If any problem occurs during the transfer    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="SOAPServerException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
If cannot find the policy period of account specified    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="AlreadyExecutedException">
        <wsdl:documentation>
If this call is already executed    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="AlreadyExecutedException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="updateAccount">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="updateAccountRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="updateAccountResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
If no account exists with the given account number    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="AlreadyExecutedException">
        <wsdl:documentation>
if the SOAP request is already executed    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="AlreadyExecutedException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="updateContact">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="updateContactRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="updateContactResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
If no contact exists with the given public id    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="AlreadyExecutedException">
        <wsdl:documentation>
if the SOAP request is already executed    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="AlreadyExecutedException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="updateProducer">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="updateProducerRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="updateProducerResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
If no producer exists with the given public id    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="AlreadyExecutedException">
        <wsdl:documentation>
if the SOAP request is already executed    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="AlreadyExecutedException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="updateProducerCode">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="updateProducerCodeRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="updateProducerCodeResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
If no producer code exists with the given public id    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="AlreadyExecutedException">
        <wsdl:documentation>
if the SOAP request is already executed    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="AlreadyExecutedException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="waiveFinalAudit">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="waiveFinalAuditRequest">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:input>
      <wsdl:output name="waiveFinalAuditResponse">
        <wsdlsoap:body encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:output>
      <wsdl:fault name="ServerStateException">
        <wsdl:documentation>
Thrown when a request is made at a time the server is in a state that disallows the request.    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="ServerStateException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="PermissionException">
        <wsdl:documentation>
Thrown when the authenticated SOAP user does not have permission to perform the requested operation    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="PermissionException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="BadIdentifierException">
        <wsdl:documentation>
Thrown when an internal public ID doesn't map to a real bean (problem could be that type was incorrect)    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="BadIdentifierException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
      <wsdl:fault name="AlreadyExecutedException">
        <wsdl:documentation>
if the SOAP request is already executed    </wsdl:documentation>
        <wsdlsoap:fault encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" name="AlreadyExecutedException" namespace="http://api.webservices.bc.guidewire.com/" use="encoded"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="BillingAPIService">
    <wsdl:documentation>This is an custom API to support integration with Policy Center and will be maintained
by Policy Center.  </wsdl:documentation>
    <wsdl:port binding="impl:BillingAPISoapBinding" name="BillingAPI">
      <wsdlsoap:address location="http://localhost:8580/bc/soap/BillingAPI"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>